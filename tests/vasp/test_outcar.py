# coding: utf-8
# Copyright (c) Max-Planck-Institut f√ºr Eisenforschung GmbH - Computational Materials Design (CM) Department
# Distributed under the terms of "New BSD License", see the LICENSE file.

import unittest
import os
import posixpath
import numpy as np
from pyiron_atomistics.vasp.base import Output, VaspCollectError
from pyiron_vasp.vasp.parser.outcar import Outcar, OutcarCollectError


class TestOutcar(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.file_location = os.path.dirname(os.path.abspath(__file__))
        cls.file_list = list()
        cls.outcar_parser = Outcar()
        file_list = os.listdir(
            os.path.abspath(
                os.path.join(
                    cls.file_location, "../static/vasp_test_files/outcar_samples"
                )
            )
        )
        file_list = sorted(file_list)
        for f in file_list:
            direc = os.path.abspath(
                os.path.join(
                    cls.file_location, "../static/vasp_test_files/outcar_samples"
                )
            )
            filename = posixpath.join(direc, f)
            cls.file_list.append(filename)

    def setUp(self):
        self.addTypeEqualityFunc(
            np.ndarray,
            lambda a, b, msg=None: np.testing.assert_array_equal(a, b, err_msg=msg),
        )

    def test_from_file(self):
        for filename in self.file_list:
            self.outcar_parser.from_file(filename=filename)
            type_dict = dict()
            type_dict["energies"] = np.ndarray
            type_dict["scf_energies"] = list
            type_dict["forces"] = np.ndarray
            type_dict["positions"] = np.ndarray
            type_dict["cells"] = np.ndarray
            type_dict["steps"] = np.ndarray
            type_dict["temperatures"] = np.ndarray
            type_dict["time"] = np.ndarray
            type_dict["fermi_level"] = float
            type_dict["scf_dipole_moments"] = list
            type_dict["kin_energy_error"] = float
            type_dict["stresses"] = np.ndarray
            type_dict["irreducible_kpoints"] = np.ndarray
            type_dict["pressures"] = np.ndarray
            type_dict["energies_int"] = np.ndarray
            type_dict["energies_zero"] = np.ndarray
            parse_keys = self.outcar_parser.parse_dict.keys()
            for key, value in type_dict.items():
                self.assertTrue(key in parse_keys)
                try:
                    self.assertIsInstance(self.outcar_parser.parse_dict[key], value)
                except AssertionError:
                    if int(filename.split("/OUTCAR_")[-1]) == 8:
                        self.assertEqual(key, "fermi_level")
                    else:
                        print(key, self.outcar_parser.parse_dict[key])
                        raise AssertionError("{} has the wrong type".format(key))

    def test_energy_components(self):
        output_dict = {
            1: [
                np.array(
                    [
                        [
                            3.11040193e02,
                            3.11040193e02,
                            3.11040193e02,
                            3.11040193e02,
                            3.11040193e02,
                            3.11040193e02,
                            3.11040193e02,
                            3.11040193e02,
                            3.11040193e02,
                            3.11040193e02,
                            3.11040193e02,
                        ],
                        [
                            -3.56870480e03,
                            -3.56870480e03,
                            -3.56870480e03,
                            -3.56870480e03,
                            -3.56870480e03,
                            -3.56870480e03,
                            -3.56870480e03,
                            -3.56870480e03,
                            -3.56870480e03,
                            -3.56870480e03,
                            -3.56870480e03,
                        ],
                        [
                            -1.06811478e03,
                            -1.06811478e03,
                            -1.06811478e03,
                            -1.06811478e03,
                            -1.06811478e03,
                            -9.61785931e02,
                            -1.00196716e03,
                            -9.95581283e02,
                            -9.92363216e02,
                            -9.91632743e02,
                            -9.92010883e02,
                        ],
                        [
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                        ],
                        [
                            1.27995403e02,
                            1.27995403e02,
                            1.27995403e02,
                            1.27995403e02,
                            1.27995403e02,
                            1.22254891e02,
                            1.24478689e02,
                            1.24167313e02,
                            1.24006669e02,
                            1.23971488e02,
                            1.23991177e02,
                        ],
                        [
                            3.56282886e03,
                            3.56282886e03,
                            3.56282886e03,
                            3.56282886e03,
                            3.56282886e03,
                            3.56282886e03,
                            3.56282886e03,
                            3.56282886e03,
                            3.56282886e03,
                            3.56282886e03,
                            3.56282886e03,
                        ],
                        [
                            -3.83962186e03,
                            -3.83962186e03,
                            -3.83962186e03,
                            -3.83962186e03,
                            -3.83962186e03,
                            -3.83962186e03,
                            -3.83962186e03,
                            -3.83962186e03,
                            -3.83962186e03,
                            -3.83962186e03,
                            -3.83962186e03,
                        ],
                        [
                            1.82120100e-02,
                            -3.17955000e-03,
                            -4.71608800e-02,
                            -4.76011300e-02,
                            -4.76103200e-02,
                            -3.23226400e-02,
                            -7.39963200e-02,
                            -7.26511200e-02,
                            -6.97540100e-02,
                            -6.91429300e-02,
                            -6.93989300e-02,
                        ],
                        [
                            3.11274842e02,
                            1.24444511e02,
                            1.17786312e02,
                            1.17743124e02,
                            1.17742708e02,
                            -3.11881550e00,
                            5.39081500e01,
                            5.30042526e01,
                            5.12057165e01,
                            5.08596365e01,
                            5.10503187e01,
                        ],
                        [
                            4.32689874e03,
                            4.32689874e03,
                            4.32689874e03,
                            4.32689874e03,
                            4.32689874e03,
                            4.32689874e03,
                            4.32689874e03,
                            4.32689874e03,
                            4.32689874e03,
                            4.32689874e03,
                            4.32689874e03,
                        ],
                        [
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                        ],
                    ]
                )
            ],
            10: [
                np.array(
                    [
                        [
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                            7.21830000e-04,
                        ],
                        [
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                            -1.36188267e00,
                        ],
                        [
                            -6.52295800e00,
                            -6.52295800e00,
                            -6.52295800e00,
                            -6.52295800e00,
                            -6.52295800e00,
                            -6.69917268e00,
                            -6.79240343e00,
                            -6.98146757e00,
                            -6.99827516e00,
                            -7.00064785e00,
                            -7.01612148e00,
                            -7.02394435e00,
                            -7.02452946e00,
                            -7.02493242e00,
                            -7.02558878e00,
                            -7.02528231e00,
                            -7.02517393e00,
                            -7.02517159e00,
                            -7.02529274e00,
                            -7.02526395e00,
                            -7.02525493e00,
                            -7.02529771e00,
                            -7.02529712e00,
                            -7.02528068e00,
                            -7.02528007e00,
                            -7.02528745e00,
                            -7.02528745e00,
                            -7.02528464e00,
                            -7.02528434e00,
                            -7.02528530e00,
                            -7.02528511e00,
                            -7.02528472e00,
                            -7.02528483e00,
                        ],
                        [
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                        ],
                        [
                            2.15205495e00,
                            2.15205495e00,
                            2.15205495e00,
                            2.15205495e00,
                            2.15205495e00,
                            3.35059252e00,
                            2.68157866e00,
                            2.32209590e00,
                            2.33791866e00,
                            2.29842336e00,
                            2.28807101e00,
                            2.28963297e00,
                            2.28837550e00,
                            2.28796317e00,
                            2.28754893e00,
                            2.28687410e00,
                            2.28683304e00,
                            2.28674398e00,
                            2.28674354e00,
                            2.28670352e00,
                            2.28668492e00,
                            2.28668912e00,
                            2.28668394e00,
                            2.28668021e00,
                            2.28667833e00,
                            2.28667986e00,
                            2.28667962e00,
                            2.28667852e00,
                            2.28667857e00,
                            2.28667891e00,
                            2.28667882e00,
                            2.28667871e00,
                            2.28667872e00,
                        ],
                        [
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                            2.13207284e00,
                        ],
                        [
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                            -2.14244787e00,
                        ],
                        [
                            -2.56000000e-05,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                            -0.00000000e00,
                        ],
                        [
                            -3.00856639e00,
                            -7.26657447e00,
                            -8.00373234e00,
                            -8.01416823e00,
                            -8.01417185e00,
                            -7.84778871e00,
                            -7.80465760e00,
                            -7.66811360e00,
                            -7.65912484e00,
                            -7.65676265e00,
                            -7.64476756e00,
                            -7.63869177e00,
                            -7.63796908e00,
                            -7.63762574e00,
                            -7.63711654e00,
                            -7.63734483e00,
                            -7.63743098e00,
                            -7.63743233e00,
                            -7.63737061e00,
                            -7.63739527e00,
                            -7.63740262e00,
                            -7.63737751e00,
                            -7.63737990e00,
                            -7.63739139e00,
                            -7.63739422e00,
                            -7.63738989e00,
                            -7.63739054e00,
                            -7.63739248e00,
                            -7.63739360e00,
                            -7.63739289e00,
                            -7.63739304e00,
                            -7.63739357e00,
                            -7.63739346e00,
                        ],
                        [
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                            1.25413264e01,
                        ],
                        [
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                        ],
                    ]
                )
            ],
            2: [],
            3: [],
            4: [
                np.array(
                    [
                        [
                            1.22027452e02,
                            1.22027452e02,
                            1.22027452e02,
                            1.22027452e02,
                            1.22027452e02,
                            1.22027452e02,
                            1.22027452e02,
                            1.22027452e02,
                            1.22027452e02,
                            1.22027452e02,
                            1.22027452e02,
                        ],
                        [
                            -1.19781000e03,
                            -1.19781000e03,
                            -1.19781000e03,
                            -1.19781000e03,
                            -1.19781000e03,
                            -1.19781000e03,
                            -1.19781000e03,
                            -1.19781000e03,
                            -1.19781000e03,
                            -1.19781000e03,
                            -1.19781000e03,
                        ],
                        [
                            -2.16862743e02,
                            -2.16862743e02,
                            -2.16862743e02,
                            -2.16862743e02,
                            -2.16862743e02,
                            -1.83530605e02,
                            -1.87804210e02,
                            -1.85919446e02,
                            -1.84645761e02,
                            -1.83934380e02,
                            -1.83839155e02,
                        ],
                        [
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                        ],
                        [
                            1.00842076e01,
                            1.00842076e01,
                            1.00842076e01,
                            1.00842076e01,
                            1.00842076e01,
                            8.34314156e00,
                            9.36952921e00,
                            9.35301187e00,
                            9.34802547e00,
                            9.26480159e00,
                            9.26722720e00,
                        ],
                        [
                            1.04660331e03,
                            1.04660331e03,
                            1.04660331e03,
                            1.04660331e03,
                            1.04660331e03,
                            1.04660331e03,
                            1.04660331e03,
                            1.04660331e03,
                            1.04660331e03,
                            1.04660331e03,
                            1.04660331e03,
                        ],
                        [
                            -1.06769927e03,
                            -1.06769927e03,
                            -1.06769927e03,
                            -1.06769927e03,
                            -1.06769927e03,
                            -1.06769927e03,
                            -1.06769927e03,
                            -1.06769927e03,
                            -1.06769927e03,
                            -1.06769927e03,
                            -1.06769927e03,
                        ],
                        [
                            8.87991000e-03,
                            -1.81310000e-02,
                            -8.29770000e-03,
                            -8.30125000e-03,
                            -8.30163000e-03,
                            -5.33704000e-03,
                            -1.67182800e-02,
                            -1.51024200e-02,
                            -1.45925100e-02,
                            -1.48428300e-02,
                            -1.48895300e-02,
                        ],
                        [
                            1.50784940e02,
                            8.68964849e01,
                            8.57384360e01,
                            8.57329280e01,
                            8.57328580e01,
                            5.19388760e01,
                            5.88883358e01,
                            5.86135754e01,
                            5.85436832e01,
                            5.85475857e01,
                            5.84666774e01,
                        ],
                        [
                            1.19459724e03,
                            1.19459724e03,
                            1.19459724e03,
                            1.19459724e03,
                            1.19459724e03,
                            1.19459724e03,
                            1.19459724e03,
                            1.19459724e03,
                            1.19459724e03,
                            1.19459724e03,
                            1.19459724e03,
                        ],
                        [
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                        ],
                    ]
                )
            ],
            5: [],
            6: [],
            7: [
                np.array(
                    [
                        [
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                            8.23117017e02,
                        ],
                        [
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                            -1.02923428e04,
                        ],
                        [
                            -4.40509305e03,
                            -4.40509305e03,
                            -4.40509305e03,
                            -4.40509305e03,
                            -4.40509305e03,
                            -4.36357560e03,
                            -4.38012229e03,
                            -4.39300727e03,
                            -4.38363148e03,
                            -4.37761721e03,
                            -4.37567346e03,
                            -4.37521793e03,
                            -4.36748437e03,
                            -4.36558671e03,
                            -4.36592705e03,
                            -4.36624282e03,
                            -4.36709824e03,
                            -4.36717781e03,
                            -4.36710828e03,
                            -4.36699225e03,
                            -4.36692418e03,
                            -4.36679748e03,
                            -4.36672292e03,
                            -4.36668710e03,
                            -4.36667414e03,
                            -4.36667246e03,
                            -4.36667271e03,
                            -4.36667333e03,
                            -4.36667386e03,
                            -4.36667393e03,
                            -4.36667359e03,
                            -4.36667290e03,
                            -4.36667202e03,
                            -4.36667099e03,
                            -4.36667002e03,
                            -4.36666902e03,
                            -4.36666799e03,
                            -4.36666704e03,
                            -4.36666626e03,
                            -4.36666584e03,
                            -4.36666562e03,
                            -4.36666556e03,
                            -4.36666556e03,
                            -4.36666560e03,
                            -4.36666564e03,
                            -4.36666570e03,
                            -4.36666576e03,
                            -4.36666583e03,
                            -4.36666591e03,
                        ],
                        [
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                        ],
                        [
                            5.15845499e01,
                            5.15845499e01,
                            5.15845499e01,
                            5.15845499e01,
                            5.15845499e01,
                            5.35024119e01,
                            5.38878873e01,
                            5.44507307e01,
                            5.50379335e01,
                            5.55749959e01,
                            5.72413080e01,
                            5.83519732e01,
                            5.95074718e01,
                            5.97501647e01,
                            5.93821421e01,
                            5.93041597e01,
                            5.91798218e01,
                            5.91657820e01,
                            5.92058537e01,
                            5.92219278e01,
                            5.92388158e01,
                            5.92699515e01,
                            5.92826407e01,
                            5.92950853e01,
                            5.92964418e01,
                            5.92991270e01,
                            5.93009674e01,
                            5.93019718e01,
                            5.93029833e01,
                            5.93030477e01,
                            5.93032489e01,
                            5.93031882e01,
                            5.93032445e01,
                            5.93034137e01,
                            5.93035528e01,
                            5.93037406e01,
                            5.93039284e01,
                            5.93042274e01,
                            5.93044189e01,
                            5.93044819e01,
                            5.93044669e01,
                            5.93045405e01,
                            5.93044912e01,
                            5.93045140e01,
                            5.93044732e01,
                            5.93045070e01,
                            5.93044562e01,
                            5.93044869e01,
                            5.93044503e01,
                        ],
                        [
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                            1.70983543e04,
                        ],
                        [
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                            -1.70181214e04,
                        ],
                        [
                            -1.25300000e-05,
                            -8.25670000e-04,
                            -3.99369000e-03,
                            -5.68529000e-03,
                            -5.84393000e-03,
                            3.85977000e-03,
                            7.12138000e-03,
                            -7.65328000e-03,
                            4.82730000e-03,
                            7.36906000e-03,
                            8.27893000e-03,
                            9.03097000e-03,
                            5.69993000e-03,
                            4.31594000e-03,
                            1.74856000e-03,
                            1.93585000e-03,
                            1.59455000e-03,
                            1.77080000e-03,
                            1.42750000e-03,
                            1.20626000e-03,
                            1.08709000e-03,
                            8.13310000e-04,
                            5.80230000e-04,
                            3.66580000e-04,
                            2.41520000e-04,
                            1.82320000e-04,
                            1.31110000e-04,
                            9.79400000e-05,
                            7.12500000e-05,
                            4.89800000e-05,
                            3.55900000e-05,
                            2.65400000e-05,
                            1.86400000e-05,
                            1.21900000e-05,
                            7.51000000e-06,
                            3.89000000e-06,
                            7.30000000e-07,
                            -1.58000000e-06,
                            -3.14000000e-06,
                            -3.64000000e-06,
                            -4.12000000e-06,
                            -3.97000000e-06,
                            -3.65000000e-06,
                            -3.64000000e-06,
                            -3.58000000e-06,
                            -3.55000000e-06,
                            -3.57000000e-06,
                            -3.70000000e-06,
                            -3.56000000e-06,
                        ],
                        [
                            1.90786365e03,
                            1.69472644e02,
                            -6.65665578e01,
                            -8.69345826e01,
                            -8.76713131e01,
                            -1.34757663e02,
                            -1.17759351e02,
                            -9.73580304e01,
                            -1.07943014e02,
                            -1.14080167e02,
                            -1.15660442e02,
                            -1.15071302e02,
                            -1.23150702e02,
                            -1.24928326e02,
                            -1.24034937e02,
                            -1.23589086e02,
                            -1.22483833e02,
                            -1.22355045e02,
                            -1.22410903e02,
                            -1.22520670e02,
                            -1.22594211e02,
                            -1.22740332e02,
                            -1.22818932e02,
                            -1.22856719e02,
                            -1.22862949e02,
                            -1.22860613e02,
                            -1.22854851e02,
                            -1.22850921e02,
                            -1.22848590e02,
                            -1.22847102e02,
                            -1.22847117e02,
                            -1.22847636e02,
                            -1.22848425e02,
                            -1.22849440e02,
                            -1.22850287e02,
                            -1.22851209e02,
                            -1.22852101e02,
                            -1.22852994e02,
                            -1.22853685e02,
                            -1.22854030e02,
                            -1.22854161e02,
                            -1.22854230e02,
                            -1.22854170e02,
                            -1.22854129e02,
                            -1.22854043e02,
                            -1.22853981e02,
                            -1.22853881e02,
                            -1.22853820e02,
                            -1.22853705e02,
                        ],
                        [
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                            1.36229301e04,
                        ],
                        [
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                            0.00000000e00,
                        ],
                    ]
                )
            ],
            8: [],
            9: [
                np.array(
                    [
                        [2.24251290e-01, 2.24251290e-01],
                        [5.45108060e01, 5.45108060e01],
                        [-4.15898413e02, -4.15898413e02],
                        [0.00000000e00, 0.00000000e00],
                        [3.21429397e01, 3.21429397e01],
                        [3.50817532e02, 3.50817532e02],
                        [-3.52633958e02, -3.52633958e02],
                        [-3.58062000e-03, -0.00000000e00],
                        [-6.58967579e01, -1.33990925e02],
                        [4.57329294e02, 4.57329294e02],
                        [0.00000000e00, 0.00000000e00],
                    ]
                ),
                np.array(
                    [
                        [2.24251290e-01, 2.24251290e-01],
                        [6.01934010e00, 6.01934010e00],
                        [-3.86703017e02, -3.98025772e02],
                        [0.00000000e00, 0.00000000e00],
                        [3.09100574e01, 3.14932854e01],
                        [4.43545981e02, 4.43545981e02],
                        [-4.45422496e02, -4.45422496e02],
                        [-0.00000000e00, -0.00000000e00],
                        [-1.16790581e02, -1.06085517e02],
                        [4.57329294e02, 4.57329294e02],
                        [0.00000000e00, 0.00000000e00],
                    ]
                ),
            ],
        }
        for filename in self.file_list:
            output = self.outcar_parser.get_energy_components(filename)
            self.assertTrue(
                np.allclose(output, output_dict[int(filename.split("/OUTCAR_")[-1])])
            )

    def test_get_positions_and_forces(self):
        for filename in self.file_list:
            output = self.outcar_parser.get_positions_and_forces(filename)
            self.assertIsInstance(output[0], np.ndarray)
            self.assertIsInstance(output[1], np.ndarray)
            self.assertEqual(len(output[0]), len(output[1]))
            if int(filename.split("/OUTCAR_")[-1]) == 1:
                positions = np.array(
                    [
                        [
                            [0.0, 0.0, 0.0],
                            [1.85, 1.85, 0.0],
                            [1.85, 0.0, 1.85],
                            [0.0, 1.85, 1.85],
                        ]
                    ]
                )
                forces = np.array(
                    [
                        [
                            [-0.0, 0.0, 0.0],
                            [-0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0],
                            [0.0, -0.0, -0.0],
                        ]
                    ]
                )
                self.assertEqual(positions.__str__(), output[0].__str__())
                self.assertEqual(forces.__str__(), output[1].__str__())
            if int(filename.split("/OUTCAR_")[-1]) == 2:
                positions = np.array([[[0.0, 0.0, 0.0], [1.4, 1.4, 1.4]]])
                forces = np.array([[[-0.0, 0.0, 0.0], [0.0, -0.0, -0.0]]])
                self.assertEqual(positions.__str__(), output[0].__str__())
                self.assertEqual(forces.__str__(), output[1].__str__())
            if (
                int(filename.split("/OUTCAR_")[-1]) == 3
                or int(filename.split("/OUTCAR_")[-1]) == 5
                or int(filename.split("/OUTCAR_")[-1]) == 6
            ):
                positions = np.array([[[0.0, 0.0, 0.0], [1.4, 1.4, 1.4]]])
                forces = np.array([[[0.0, -0.0, 0.0], [-0.0, 0.0, -0.0]]])
                self.assertEqual(positions.__str__(), output[0].__str__())
                self.assertEqual(forces.__str__(), output[1].__str__())
            if int(filename.split("/OUTCAR_")[-1]) == 4:
                positions = np.array([[[0.0, 0.0, 0.0], [1.4, 1.4, 1.4]]])
                forces = np.array([[[-0.0, -0.0, 0.0], [0.0, 0.0, 0.0]]])
                self.assertEqual(positions.__str__(), output[0].__str__())
                self.assertEqual(forces.__str__(), output[1].__str__())

    def test_get_memory_used(self):
        memory_usage_dict = {
            1: 29757440.0,
            2: 39524.0,
            3: 42936.0,
            4: 24162304.0,
            5: 54948.0,
            6: None,
            7: 463144.0,
            8: 0.0,
            9: 787952.0,
            10: 1036056.0,
            11: 39113.0,
        }
        for filename in self.file_list:
            self.assertEqual(
                self.outcar_parser.get_memory_used(filename),
                memory_usage_dict[int(filename.split("/OUTCAR_")[-1])],
            )

    def test_get_ediel_sol(self):
        ediel_sol_dict = {
            1: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            10: [
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            2: [],
            3: [],
            4: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            5: [],
            6: [],
            7: [
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            8: [],
            9: [0.0, 0.0, 0.0, 0.0],
        }
        for filename in self.file_list:
            self.assertTrue(
                np.all(
                    np.isclose(
                        self.outcar_parser.get_ediel_sol(filename),
                        ediel_sol_dict[int(filename.split("/OUTCAR_")[-1])],
                    )
                )
            )

    def test_get_cpu_time(self):
        cpu_time_dict = {
            1: 3.543,
            2: 0.426,
            3: 0.761,
            4: 1.98,
            5: 1.7,
            6: None,
            7: 2705.081,
            8: 11374.639,
            9: 20.894,
            10: 225.942,
        }
        for filename in self.file_list:
            self.assertEqual(
                self.outcar_parser.get_cpu_time(filename),
                cpu_time_dict[int(filename.split("/OUTCAR_")[-1])],
            )

    def test_get_user_time(self):
        user_time_dict = {
            1: 3.439,
            2: 0.336,
            3: 0.68,
            4: 1.902,
            5: 1.591,
            6: None,
            7: 2679.4,
            8: 11373.883,
            9: 20.347,
            10: 222.991,
        }
        for filename in self.file_list:
            self.assertEqual(
                self.outcar_parser.get_user_time(filename),
                user_time_dict[int(filename.split("/OUTCAR_")[-1])],
            )

    def test_get_system_time(self):
        system_time_dict = {
            1: 0.104,
            2: 0.089,
            3: 0.081,
            4: 0.078,
            5: 0.108,
            6: None,
            7: 25.68,
            8: 0.756,
            9: 0.548,
            10: 2.952,
        }
        for filename in self.file_list:
            self.assertEqual(
                self.outcar_parser.get_system_time(filename),
                system_time_dict[int(filename.split("/OUTCAR_")[-1])],
            )

    def test_get_elapsed_time(self):
        elapsed_time_dict = {
            1: 2.117,
            2: 2.136,
            3: 3.314,
            4: 1.19,
            5: 3.512,
            6: None,
            7: 2716.647,
            8: 11382.323,
            9: 21.06,
            10: 226.501,
        }
        for filename in self.file_list:
            self.assertEqual(
                self.outcar_parser.get_elapsed_time(filename),
                elapsed_time_dict[int(filename.split("/OUTCAR_")[-1])],
            )

    def test_get_positions(self):
        for filename in self.file_list:
            output = self.outcar_parser.get_positions(filename)
            self.assertIsInstance(output, np.ndarray)
            if int(filename.split("/OUTCAR_")[-1]) == 1:
                positions = np.array(
                    [
                        [
                            [0.0, 0.0, 0.0],
                            [1.85, 1.85, 0.0],
                            [1.85, 0.0, 1.85],
                            [0.0, 1.85, 1.85],
                        ]
                    ]
                )
                self.assertEqual(positions.__str__(), output.__str__())
            if int(filename.split("/OUTCAR_")[-1]) in [2, 3, 4, 5, 6]:
                positions = np.array([[[0.0, 0.0, 0.0], [1.4, 1.4, 1.4]]])
                self.assertEqual(positions.__str__(), output.__str__())

    def test_get_forces(self):
        for filename in self.file_list:
            output = self.outcar_parser.get_forces(filename)
            self.assertIsInstance(output, np.ndarray)
            if int(filename.split("/OUTCAR_")[-1]) == 1:
                forces = np.array(
                    [
                        [
                            [-0.0, 0.0, 0.0],
                            [-0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0],
                            [0.0, -0.0, -0.0],
                        ]
                    ]
                )
                self.assertEqual(forces.__str__(), output.__str__())
            if int(filename.split("/OUTCAR_")[-1]) == 2:
                forces = np.array([[[-0.0, 0.0, 0.0], [0.0, -0.0, -0.0]]])
                self.assertEqual(forces.__str__(), output.__str__())
            if int(filename.split("/OUTCAR_")[-1]) in [3, 5, 6]:
                forces = np.array([[[0.0, -0.0, 0.0], [-0.0, 0.0, -0.0]]])
                self.assertEqual(forces.__str__(), output.__str__())
            if int(filename.split("/OUTCAR_")[-1]) == 4:
                forces = np.array([[[-0.0, -0.0, 0.0], [0.0, 0.0, 0.0]]])
                self.assertEqual(forces.__str__(), output.__str__())

    def test_get_cells(self):
        for filename in self.file_list:
            output = self.outcar_parser.get_cells(filename)
            self.assertIsInstance(output, np.ndarray)
            if int(filename.split("/OUTCAR_")[-1]) == 1:
                cells = np.array([[[3.7, 0.0, 0.0], [0.0, 3.7, 0.0], [0.0, 0.0, 3.7]]])
                self.assertEqual(cells.__str__(), output.__str__())
            if int(filename.split("/OUTCAR_")[-1]) in [2, 4, 5, 6]:
                cells = np.array([[[2.8, 0.0, 0.0], [0.0, 2.8, 0.0], [0.0, 0.0, 2.8]]])
                self.assertEqual(cells.__str__(), output.__str__())

    def test_get_total_energies(self):
        for filename in self.file_list:
            output = self.outcar_parser.get_total_energies(filename)
            self.assertIsInstance(output, np.ndarray)
            if int(filename.split("/OUTCAR_")[-1]) == 1:
                energies = np.array([-24.59765979])
                self.assertEqual(energies.__str__(), output.__str__())
            if int(filename.split("/OUTCAR_")[-1]) == 2:
                energies = np.array([-17.73798679])
                self.assertEqual(energies.__str__(), output.__str__())
            if int(filename.split("/OUTCAR_")[-1]) in [3, 4]:
                energies = np.array([-18.40140804])
                self.assertEqual(energies.__str__(), output.__str__())
            if int(filename.split("/OUTCAR_")[-1]) in [5, 6]:
                energies = np.array([-18.40218607])
                self.assertEqual(energies.__str__(), output.__str__())

    def test_get_all_total_energies(self):
        for filename in self.file_list:
            output = self.outcar_parser.get_all_total_energies(filename)
            self.assertIsInstance(output, list)
            self.assertIsInstance(output[-1], np.ndarray)
            if int(filename.split("/OUTCAR_")[-1]) == 1:
                energies = np.array(
                    [
                        164.50346113,
                        -22.34826105,
                        -29.05044151,
                        -29.09407035,
                        -29.0944954,
                        -27.08800718,
                        -24.63733705,
                        -24.60427656,
                        -24.59776189,
                        -24.59765131,
                        -24.59765979,
                    ]
                )
                self.assertEqual(energies.__str__(), output[0].__str__())
            if int(filename.split("/OUTCAR_")[-1]) == 2:
                energies = np.array(
                    [
                        49.31292902,
                        -18.6411937,
                        -20.8983855,
                        -20.92056153,
                        -20.92073722,
                        -17.95357529,
                        -17.76756585,
                        -17.739524,
                        -17.7379502,
                        -17.73798679,
                    ]
                )
                self.assertEqual(energies.__str__(), output[0].__str__())
            if int(filename.split("/OUTCAR_")[-1]) in [3, 4]:
                energies = np.array(
                    [
                        44.19769573,
                        -19.71777011,
                        -20.86598567,
                        -20.87149728,
                        -20.87156762,
                        -18.51206993,
                        -18.43794441,
                        -18.41311659,
                        -18.40310749,
                        -18.4014402,
                        -18.40140804,
                    ]
                )
                self.assertEqual(energies.__str__(), output[0].__str__())
            if int(filename.split("/OUTCAR_")[-1]) in [5, 6]:
                energies = np.array(
                    [
                        69.15405871,
                        -18.00103756,
                        -20.85032272,
                        -20.87198829,
                        -20.87222361,
                        -18.51305208,
                        -18.43873509,
                        -18.41390999,
                        -18.40387841,
                        -18.40222137,
                        -18.40218607,
                    ]
                )
                self.assertEqual(energies.__str__(), output[0].__str__())

    def test_get_energy_without_entropy(self):
        for filename in self.file_list:
            output = self.outcar_parser.get_energy_without_entropy(filename)
            energy_tot = self.outcar_parser.get_total_energies(filename)
            self.assertIsInstance(output, np.ndarray)
            self.assertEqual(len(energy_tot), len(output))

    def test_get_energy_sigma_0(self):
        for filename in self.file_list:
            output = self.outcar_parser.get_energy_sigma_0(filename)
            energy_tot = self.outcar_parser.get_total_energies(filename)
            self.assertIsInstance(output, np.ndarray)
            self.assertEqual(len(energy_tot), len(output))

    def test_get_temperatures(self):
        for filename in self.file_list:
            output = self.outcar_parser.get_temperatures(filename)
            self.assertIsInstance(output, np.ndarray)
            if int(filename.split("/OUTCAR_")[-1]) in [1, 2, 3, 4, 5, 6]:
                temperatures = np.array([0.0])
                self.assertEqual(temperatures.__str__(), output.__str__())

    def test_get_steps(self):
        def naive_parse(filename):
            with open(filename) as f:
                nblock = 1
                steps = 0
                for l in f:
                    if "NBLOCK" in l:
                        nblock = int(l.split(";")[0].split("=")[1])
                    steps += "FREE ENERGIE OF THE ION-ELECTRON SYSTEM" in l
                return steps, nblock

        for filename in self.file_list:
            with self.subTest(filename=filename):
                output = self.outcar_parser.get_steps(filename)
                self.assertIsInstance(output, np.ndarray, "steps has to be an array!")
                steps, nblock = naive_parse(filename)
                total = steps * nblock
                self.assertEqual(
                    output,
                    np.arange(0, total, nblock),
                    f"Parsed output steps do not match numpy.arange(0, {total}, {nblock})!",
                )

    def test_get_time(self):
        def naive_parse(filename):
            with open(filename) as f:
                for l in f:
                    if "POTIM" in l:
                        return float(l.split("=")[1].strip().split()[0])
                return 1.0

        for filename in self.file_list:
            with self.subTest(filename=filename):
                potim = naive_parse(filename)
                time = self.outcar_parser.get_time(filename)
                step = self.outcar_parser.get_steps(filename)
                for t, s in zip(time, step):
                    self.assertEqual(
                        t,
                        s * potim,
                        f"Time {t} is not equal to steps times POTIM {potim * s}!",
                    )

    def test_get_fermi_level(self):
        for filename in self.file_list:
            output = self.outcar_parser.get_fermi_level(filename)
            try:
                self.assertIsInstance(output, float)
            except AssertionError:
                self.assertEqual(int(filename.split("/OUTCAR_")[-1]), 8)
            if int(filename.split("/OUTCAR_")[-1]) == 1:
                fermi_level = 2.9738
                self.assertEqual(fermi_level, output)
            if int(filename.split("/OUTCAR_")[-1]) == 2:
                fermi_level = 5.9788
                self.assertEqual(fermi_level, output)
            if int(filename.split("/OUTCAR_")[-1]) in [3, 4]:
                fermi_level = 5.9613
                self.assertEqual(fermi_level, output)
            if int(filename.split("/OUTCAR_")[-1]) in [5, 6]:
                fermi_level = 5.9614
                self.assertEqual(fermi_level, output)

    def test_get_magnetization(self):
        for filename in self.file_list:
            output, final_magmoms = self.outcar_parser.get_magnetization(filename)
            positions = self.outcar_parser.get_positions(filename)
            if int(filename.split("/OUTCAR_")[-1]) == 1:
                magnetization = [np.array([])]
                self.assertEqual(magnetization.__str__(), output.__str__())
                self.assertFalse(final_magmoms)
            if int(filename.split("/OUTCAR_")[-1]) == 2:
                magnetization = [np.array([])]
                self.assertEqual(magnetization.__str__(), output.__str__())
                self.assertFalse(final_magmoms)
            if int(filename.split("/OUTCAR_")[-1]) == 3:
                magnetization = [
                    np.array(
                        [
                            4.0,
                            4.0,
                            4.0,
                            4.0,
                            3.1349091,
                            4.1157043,
                            4.2255076,
                            4.2514329,
                            4.2041297,
                            4.2125079,
                            4.2125079,
                        ]
                    )
                ]
                self.assertEqual(magnetization.__str__(), output.__str__())
                self.assertFalse(final_magmoms)
            if int(filename.split("/OUTCAR_")[-1]) == 4:
                magnetization = [
                    np.array(
                        [
                            4.0,
                            4.0,
                            4.0,
                            4.0,
                            3.1349091,
                            4.1157043,
                            4.2255076,
                            4.2514329,
                            4.2041297,
                            4.2125079,
                            4.2125079,
                        ]
                    )
                ]
                final_mag_lst = [[2.111, 2.111]]
                self.assertEqual(magnetization.__str__(), output.__str__())
                self.assertEqual(final_magmoms, final_mag_lst)
            if int(filename.split("/OUTCAR_")[-1]) == 5:
                magnetization = [
                    np.array(
                        [
                            [0.0, 4.0, 0.0],
                            [0.0, 4.0, 0.0],
                            [0.0, 4.0, 0.0],
                            [0.0, 4.0, 0.0],
                            [-0.0, 3.1360688, -0.0],
                            [-0.0, 4.1168471, 0.0],
                            [0.0, 4.2261074, -0.0],
                            [-0.0, 4.2517361, 0.0],
                            [-0.0, 4.2043676, 0.0],
                            [0.0, 4.2128061, 0.0],
                            [0.0, 4.2128061, 0.0],
                        ]
                    )
                ]
                self.assertEqual(magnetization.__str__(), output.__str__())
                self.assertFalse(final_magmoms)

            if int(filename.split("/OUTCAR_")[-1]) == 6:
                magnetization = [
                    np.array(
                        [
                            [0.0, 4.0, 0.0],
                            [0.0, 4.0, 0.0],
                            [0.0, 4.0, 0.0],
                            [0.0, 4.0, 0.0],
                            [-0.0, 3.1360688, -0.0],
                            [-0.0, 4.1168471, 0.0],
                            [0.0, 4.2261074, -0.0],
                            [-0.0, 4.2517361, 0.0],
                            [-0.0, 4.2043676, 0.0],
                            [0.0, 4.2128061, 0.0],
                            [0.0, 4.2128061, 0.0],
                        ]
                    )
                ]
                final_mag_lst = [[[0.0, 2.111, -0.0], [0.0, 2.111, 0.0]]]
                self.assertEqual(magnetization.__str__(), output.__str__())
                self.assertEqual(final_magmoms, final_mag_lst)
                final_magmoms = np.array(final_magmoms)
                final_magmoms[:, np.arange(len(positions[0]), dtype=int), :] = (
                    final_magmoms.copy()
                )
                self.assertEqual(np.array(final_magmoms).shape[1], positions.shape[1])

            if int(filename.split("/OUTCAR_")[-1]) == 7:
                self.assertEqual((1, 49, 3), np.array(output).shape)
                self.assertEqual((11, 32, 3), np.array(final_magmoms).shape)
                final_magmoms = np.array(final_magmoms)
                final_magmoms[:, np.arange(len(positions[0]), dtype=int), :] = (
                    final_magmoms.copy()
                )
                self.assertEqual(np.array(final_magmoms).shape[1], positions.shape[1])

    def test_get_broyden_mixing_mesh(self):
        for filename in self.file_list:
            output = self.outcar_parser.get_broyden_mixing_mesh(filename)
            if int(filename.split("/OUTCAR_")[-1]) == 1:
                mixing = 729
                self.assertEqual(mixing, output)
            if int(filename.split("/OUTCAR_")[-1]) in [2, 3, 4, 5, 6]:
                mixing = 343
                self.assertEqual(mixing, output)
            if int(filename.split("/OUTCAR_")[-1]) == 8:
                mixing = 21**3
                self.assertEqual(mixing, output)

    def test_get_dipole_moments(self):
        for filename in self.file_list:
            output = self.outcar_parser.get_dipole_moments(filename)
            self.assertTrue(output)
            self.assertIsInstance(output, list)
            if len(output[0]) > 1:
                self.assertIsInstance(output[-1], np.ndarray)
                self.assertIsInstance(output[-1][-1], np.ndarray)
                self.assertEqual(len(output[-1][-1]), 3)

    def test_get_stresses(self):
        def from_vasp_voigt(stress):
            sigma = np.diag(stress[:3])
            sigma[1, 2] = sigma[2, 1] = stress[4]
            sigma[0, 2] = sigma[2, 0] = stress[5]
            sigma[0, 1] = sigma[1, 0] = stress[3]
            return sigma.reshape(1, 3, 3)

        test_data = {
            "OUTCAR_1": (
                from_vasp_voigt(
                    [-14.41433, -14.41433, -14.41433, 0.00000, 0.00000, 0.00000]
                ),
                from_vasp_voigt(
                    [-455.93181, -455.93181, -455.93181, 0.00000, 0.00000, 0.00000]
                ),
            ),
            "OUTCAR_2": (
                from_vasp_voigt(
                    [-5.38507, -5.38507, -5.38507, -0.00000, 0.00000, -0.00000]
                ),
                from_vasp_voigt(
                    [-393.03200, -393.03200, -393.03200, -0.00000, 0.00000, -0.00000]
                ),
            ),
            "OUTCAR_3": (
                from_vasp_voigt(
                    [-3.29441, -3.29441, -3.29441, 0.00000, -0.00000, 0.00000]
                ),
                from_vasp_voigt(
                    [-240.44384, -240.44384, -240.44384, 0.00000, -0.00000, 0.00000]
                ),
            ),
            "OUTCAR_4": (
                from_vasp_voigt(
                    [-3.29441, -3.29441, -3.29441, 0.00000, -0.00000, 0.00000]
                ),
                from_vasp_voigt(
                    [-240.44384, -240.44384, -240.44384, 0.00000, -0.00000, 0.00000]
                ),
            ),
            "OUTCAR_5": (
                from_vasp_voigt(
                    [-3.30660, -3.30660, -3.30660, 0.00000, -0.00000, 0.00000]
                ),
                from_vasp_voigt(
                    [-241.33405, -241.33409, -241.33405, 0.00000, -0.00000, 0.00000]
                ),
            ),
            "OUTCAR_6": (
                from_vasp_voigt(
                    [-3.30660, -3.30660, -3.30660, 0.00000, -0.00000, 0.00000]
                ),
                from_vasp_voigt(
                    [-241.33405, -241.33409, -241.33405, 0.00000, -0.00000, 0.00000]
                ),
            ),
            "OUTCAR_7": (
                from_vasp_voigt(
                    [-11.88272, -11.88272, 1.40676, 0.10858, -1.27251, 1.27251]
                ),
                from_vasp_voigt(
                    [-30.25634, -30.25634, 3.58195, 0.27646, -3.24012, 3.24012]
                ),
            ),
            "OUTCAR_8": (
                from_vasp_voigt(
                    [26.40677, 26.40677, 26.40677, 0.00000, 0.00000, 0.00000]
                ),
                from_vasp_voigt(
                    [77.52482, 77.52482, 77.52482, 0.00000, 0.00000, 0.00000]
                ),
            ),
            "OUTCAR_9": (
                np.concatenate(
                    [
                        from_vasp_voigt(
                            [-8.22615, -16.37087, -24.79610, 0.00000, 0.00000, 0.00000]
                        ),
                        from_vasp_voigt(
                            [-0.51498, -5.95380, 3.02638, 0.00000, 0.00000, 0.00000]
                        ),
                    ]
                ),
                np.concatenate(
                    [
                        from_vasp_voigt(
                            [-13.17976, -26.22903, -39.72774, 0.00000, 0.00000, 0.00000]
                        ),
                        from_vasp_voigt(
                            [-0.82508, -9.53905, 4.84880, 0.00000, 0.00000, 0.00000]
                        ),
                    ]
                ),
            ),
            "OUTCAR_10": (
                from_vasp_voigt(
                    [-0.01303, -0.01303, -0.01300, 0.00000, -0.00000, 0.00000]
                ),
                from_vasp_voigt(
                    [-0.00619, -0.00619, -0.00617, 0.00000, -0.00000, 0.00000]
                ),
            ),
        }
        for filename in self.file_list:
            output_si = self.outcar_parser.get_stresses(filename, si_unit=True)
            output_kb = self.outcar_parser.get_stresses(filename, si_unit=False)
            self.assertIsInstance(output_si, np.ndarray)
            self.assertIsInstance(output_kb, np.ndarray)
            test_si, test_kb = test_data[filename.split("/")[-1]]
            self.assertEqual(output_si, test_si, "Wrong pressures parsed (SI units)")
            self.assertEqual(output_kb, test_kb, "Wrong pressures parsed (kb units)")

    def test_get_kinetic_energy_error(self):
        for filename in self.file_list:
            output_total = self.outcar_parser.get_kinetic_energy_error(filename)
            self.assertIsInstance(output_total, float)
            if int(filename.split("/OUTCAR_")[-1]) == 1:
                kinetic_energy_error = 0.0774
                self.assertEqual(4 * kinetic_energy_error, output_total)
            if int(filename.split("/OUTCAR_")[-1]) in [2, 3, 4, 5, 6]:
                kinetic_energy_error = 0.0664
                self.assertEqual(2 * kinetic_energy_error, output_total)
            if int(filename.split("/OUTCAR_")[-1]) == 7:
                kinetic_energy_error = 16.0 * 0.0088 + 16.0 * 0.002
                self.assertEqual(kinetic_energy_error, output_total)
            if int(filename.split("/OUTCAR_")[-1]) == 8:
                kinetic_energy_error = 1.0 * 0.0236 + 32.0 * 0.0091
                self.assertEqual(kinetic_energy_error, output_total)

    def test_get_kpoints_irreducible_reciprocal(self):
        for filename in self.file_list:
            output_all = self.outcar_parser.get_irreducible_kpoints(
                filename, reciprocal=True, weight=True, planewaves=True
            )
            output_w = self.outcar_parser.get_irreducible_kpoints(
                filename, reciprocal=True, weight=True, planewaves=False
            )
            output_p = self.outcar_parser.get_irreducible_kpoints(
                filename, reciprocal=True, weight=False, planewaves=True
            )
            output_k = self.outcar_parser.get_irreducible_kpoints(
                filename, reciprocal=True, weight=False, planewaves=False
            )
            self.assertIsInstance(output_all[0], np.ndarray)
            self.assertIsInstance(output_all[1], np.ndarray)
            self.assertIsInstance(output_all[2], np.ndarray)
            self.assertIsInstance(output_w[0], np.ndarray)
            self.assertIsInstance(output_w[1], np.ndarray)
            self.assertIsInstance(output_p[0], np.ndarray)
            self.assertIsInstance(output_p[1], np.ndarray)
            self.assertIsInstance(output_k, np.ndarray)
            self.assertEqual(output_all[0].__str__(), output_w[0].__str__())
            self.assertEqual(output_all[1].__str__(), output_w[1].__str__())
            self.assertEqual(output_all[0].__str__(), output_p[0].__str__())
            self.assertEqual(output_all[2].__str__(), output_p[1].__str__())
            self.assertEqual(output_all[0].__str__(), output_k.__str__())
            if int(filename.split("/OUTCAR_")[-1]) == 1:
                output = (
                    np.array(
                        [
                            [0.125, 0.125, 0.125],
                            [0.375, 0.125, 0.125],
                            [0.375, 0.375, 0.125],
                            [0.375, 0.375, 0.375],
                        ]
                    ),
                    np.array([8.0, 24.0, 24.0, 8.0]),
                    np.array([452, 457, 451, 459]),
                )
                self.assertEqual(output_all.__str__(), output.__str__())
            if int(filename.split("/OUTCAR_")[-1]) in [2, 3, 4]:
                output = (
                    np.array(
                        [
                            [0.125, 0.125, 0.125],
                            [0.375, 0.125, 0.125],
                            [0.375, 0.375, 0.125],
                            [0.375, 0.375, 0.375],
                        ]
                    ),
                    np.array([8.0, 24.0, 24.0, 8.0]),
                    np.array([196, 199, 196, 190]),
                )
                self.assertEqual(output_all.__str__(), output.__str__())
            if int(filename.split("/OUTCAR_")[-1]) in [5, 6]:
                output = (
                    np.array(
                        [
                            [0.125, 0.125, 0.125],
                            [0.375, 0.125, 0.125],
                            [-0.375, 0.125, 0.125],
                            [0.125, 0.375, 0.125],
                            [0.375, 0.375, 0.125],
                            [-0.375, 0.375, 0.125],
                            [0.375, 0.125, 0.375],
                            [0.375, 0.375, 0.375],
                        ]
                    ),
                    np.array([8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0]),
                    np.array([392, 398, 398, 398, 392, 392, 392, 380]),
                )
                self.assertEqual(output_all.__str__(), output.__str__())

    def test_get_nelect(self):
        n_elect_list = [40.0, 16.0, 16.0, 16.0, 16.0, 16.0, 224.0, 358.0, 8, 1, 324.0]
        for filename in self.file_list:
            i = int(filename.split("_")[-1]) - 1
            self.assertEqual(n_elect_list[i], self.outcar_parser.get_nelect(filename))

    def test_get_band_properties(self):
        fermi_level_list = [2.9738, 5.9788, 5.9613, 5.9613, 5.9614, 5.9614, 3.9092]
        vbm_level_list = [
            [[3.076]],
            [[15.1392]],
            [[6.0004], [6.6175]],
            [[6.0004], [6.6175]],
            [[6.618]],
            [[6.618]],
        ]
        cbm_level_list = [
            [[4.3112]],
            [[15.1392]],
            [[6.8568], [6.9402]],
            [[6.8568], [6.9402]],
            [[6.8569]],
            [[6.8569]],
        ]

        sorted_files = np.array(self.file_list)[
            np.argsort([int(file.split("_")[-1]) for file in self.file_list])
        ]

        for i, filename in enumerate(sorted_files):
            fermi_list, vbm_list, cbm_list = self.outcar_parser.get_band_properties(
                filename=filename
            )
            if i <= 5:
                self.assertTrue(np.array_equal(fermi_list[-1], fermi_level_list[i]))
                self.assertTrue(
                    np.allclose(np.array(vbm_list), np.array(vbm_level_list[i]))
                )
                self.assertTrue(np.array_equal(cbm_list, cbm_level_list[i]))
            elif i == 8:
                self.assertTrue(np.array_equal(fermi_list, [-7.3532, -5.7586]))
                self.assertTrue(np.array_equal(vbm_list[0], [-9.7778, -7.9449]))
                self.assertTrue(np.array_equal(cbm_list[0], [-1.8327, -3.5781]))
            elif i == 9:
                self.assertTrue(np.array_equal(fermi_list[-1], -5.3064))
                self.assertTrue(
                    np.allclose(np.array(vbm_list), np.array([[-7.6374], [0.0219]]))
                )
                self.assertTrue(
                    np.allclose(np.array(cbm_list), np.array([[-0.1332], [0.0219]]))
                )

    def test_error_on_parse(self):
        """OutcarCollectError should be raised when vital information cannot be read."""
        with self.assertRaises(OutcarCollectError):
            Outcar().from_file(
                os.path.join(
                    self.file_location,
                    "../static/vasp_test_files/outcar_without_nions/OUTCAR",
                )
            )

    def test_no_error_on_incomplete_collect(self):
        """Do not raise an error when collecting output and the OUTCAR is incomplete."""
        # the reason being: VaspBase.restart() tries to collect the job before creating a new copy, but if collect fails
        # when the OUTCAR is not complete, that would mean this kind of job could not be restarted to apply some fix to
        # the input to avoid the crash.
        # We want to be able to restart any job, so errors on collect must be silenced or be of the VaspCollectError,
        # which is caught during restart
        test_folders = [
            "../static/vasp_test_files/full_job_aborted",
            "../static/vasp_test_files/outcar_without_nions",
        ]
        for folder in test_folders:
            with self.subTest(folder=folder):
                try:
                    Output().collect(
                        os.path.join(self.file_location, folder),
                        sorted_indices=[],  # necessary only because Output object otherwise needs to have a structure defined
                    )
                except VaspCollectError:
                    pass
                except Exception as e:
                    self.fail(
                        f"collect_output_parser raised {e}, but should be silent!"
                    )


if __name__ == "__main__":
    unittest.main()
